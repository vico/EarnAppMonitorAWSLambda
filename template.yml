AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description:  Service Infra Build Pipeline

Globals:
  Function:
    Timeout: 3

Parameters:
  Token:
    Type: String
    Description: EarnApp Dashboard OathRefreshToken
  WebhookUrl:
    Type: String
    Description: Discord Server's webhook URL
  local:
    Type: String
    Description: specify running on local or not
    Default: "True"

Resources:
  EBRule:
    Type: EventBridgeRule
    Properties:
      Pattern:
        detail:
          state:
            - terminated
      Target:
        Id: !GetAtt LambdaTestFunction.Arn

  LambdaTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_ARN: !GetAtt DynamoDBTestTable.Arn
          TOKEN: !Ref Token
          WEBHOOK_URL: !Ref WebhookUrl
          local: "True"
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn

  Rule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: sample-rule
      Name: everyday
      ScheduleExpression: 'cron(15 * * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaTestFunction.Arn
          Id: lambda

  DynamoDBTestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      - AttributeName: key
        AttributeType: S
      - AttributeName: date
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: KeyDate
          KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expireAt
        Enabled: true

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"

      Policies:
        - PolicyName: !Sub ${LambdaFunctionName}-DynamoDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt DynamoDBTestTable.Arn
        - PolicyName: !Sub ${LambdaFunctionName}-CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  LambdaTestFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt LambdaTestFunction.Arn
  LambdaRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt LambdaRole.Arn