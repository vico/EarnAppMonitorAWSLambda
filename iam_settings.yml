AWSTemplateFormatVersion: "2010-09-09"
Description: "Create IAM for Developer"

Parameters:
  IpList: # "1.2.3.4/32, 3.4.5.6/32"
    Type: CommaDelimitedList
    Description: A list of IPs which are able to switch to admin role.

Resources:
  # Create a dev IAM user, which can switch to admin role
  DevIAMUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref DeveloperGroup
      UserName: dev

  IpRestrictionAndMFAForcePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "IpRestrictionAndMFAForcePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # IP restriction
          - Resource: "*"
            Action: "*"
            Effect: "Deny"
            Condition:
              NotIpAddress:
                'aws:SourceIp': !Ref IpList

          # MFA require
          - Effect: "Deny"
            NotAction:
              - "iam:*"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"
          # allow list all users
          - Effect: "Allow"
            Action:
              - "iam:ListUsers"
              - "iam:ListVirtualMFADevices"
            Resource: "*"

  ChangeOwnPasswordPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "ChangeOwnPasswordPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iam:ChangePassword"
              - "iam:CreateAccessKey"
              - "iam:CreateVirtualMFADevice"
              - "iam:DeactivateMFADevice"
              - "iam:DeleteAccessKey"
              - "iam:DeleteVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:GetAccountPasswordPolicy"
              - "iam:UpdateAccessKey"
              - "iam:UpdateSigningCertificate"
              - "iam:UploadSigningCertificate"
              - "iam:UpdateLoginProfile"
              - "iam:ResyncMFADevice"
            Resource:
              - !Join
                - ''
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":user/${aws:username}"
              - !Join
                - ''
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":mfa/${aws:username}"
          - Effect: "Allow"
            Action:
              - "iam:ListUsers"
              - "iam:ListVirtualMFADevices"
            Resource: "*"

  DenyNetworkAccessPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "DenyNetworkAccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: [
          {
            Effect: "Deny",
            Action: [
              "ec2:AcceptVpcEndpointConnections",
              "ec2:AssociateDhcpOptions",
              "ec2:AssociateRouteTable",
              "ec2:AssociateSubnetCidrBlock",
              "ec2:AssociateVpcCidrBlock",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:AttachVpnGateway",
              "ec2:CreateCustomerGateway",
              "ec2:CreateDefaultSubnet",
              "ec2:CreateDefaultVpc",
              "ec2:CreateDhcpOptions",
              "ec2:CreateEgressOnlyInternetGateway",
              "ec2:CreateInternetGateway",
              "ec2:CreateNetworkAcl",
              "ec2:CreateNetworkAclEntry",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:CreateVpcEndpointConnectionNotification",
              "ec2:CreateVpcEndpointServiceConfiguration",
              "ec2:CreateVpnConnection",
              "ec2:CreateVpnConnectionRoute",
              "ec2:CreateVpnGateway",
              "ec2:DeleteEgressOnlyInternetGateway",
              "ec2:DeleteNatGateway",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DeletePlacementGroup",
              "ec2:DeleteSubnet",
              "ec2:DeleteVpc",
              "ec2:DeleteVpcEndpointConnectionNotifications",
              "ec2:DeleteVpcEndpoints",
              "ec2:DeleteVpcEndpointServiceConfigurations",
              "ec2:DeleteVpnConnection",
              "ec2:DeleteVpnConnectionRoute",
              "ec2:DeleteVpnGateway",
              "ec2:DetachInternetGateway",
              "ec2:DetachNetworkInterface",
              "ec2:DetachVpnGateway",
              "ec2:DisableVgwRoutePropagation",
              "ec2:DisableVpcClassicLinkDnsSupport",
              "ec2:DisassociateRouteTable",
              "ec2:DisassociateSubnetCidrBlock",
              "ec2:DisassociateVpcCidrBlock",
              "ec2:EnableVgwRoutePropagation",
              "ec2:EnableVpcClassicLinkDnsSupport",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:ModifyVpcEndpoint",
              "ec2:ModifyVpcEndpointConnectionNotification",
              "ec2:ModifyVpcEndpointServiceConfiguration",
              "ec2:ModifyVpcEndpointServicePermissions",
              "ec2:ModifyVpcPeeringConnectionOptions",
              "ec2:ModifyVpcTenancy",
              "ec2:MoveAddressToVpc",
              "ec2:RejectVpcEndpointConnections",
              "ec2:ReplaceNetworkAclAssociation",
              "ec2:ReplaceNetworkAclEntry",
              "ec2:ReplaceRoute",
              "ec2:ReplaceRouteTableAssociation",
              "ec2:ResetNetworkInterfaceAttribute",
              "ec2:RestoreAddressToClassic",
              "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
              "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
              "directconnect:*"
            ],
            Resource: "*"
          },
          {
            Effect: "Deny",
            Action: [
              "ec2:AcceptVpcPeeringConnection",
              "ec2:AttachClassicLinkVpc",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateVpcPeeringConnection",
              "ec2:DeleteCustomerGateway",
              "ec2:DeleteDhcpOptions",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteNetworkAcl",
              "ec2:DeleteNetworkAclEntry",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteVolume",
              "ec2:DeleteVpcPeeringConnection",
              "ec2:DetachClassicLinkVpc",
              "ec2:DisableVpcClassicLink",
              "ec2:EnableVpcClassicLink",
              "ec2:GetConsoleScreenshot",
              "ec2:RejectVpcPeeringConnection",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:AcceptTransitGatewayVpcAttachment",
              "ec2:AssociateTransitGatewayRouteTable",
              "ec2:CreateTransitGateway",
              "ec2:CreateTransitGatewayRoute",
              "ec2:CreateTransitGatewayRouteTable",
              "ec2:CreateTransitGatewayVpcAttachment",
              "ec2:DeleteTransitGateway",
              "ec2:DeleteTransitGatewayRoute",
              "ec2:DeleteTransitGatewayRouteTable",
              "ec2:DeleteTransitGatewayVpcAttachment",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeTransitGateways",
              "ec2:DisableTransitGatewayRouteTablePropagation",
              "ec2:DisassociateTransitGatewayRouteTable",
              "ec2:EnableTransitGatewayRouteTablePropagation",
              "ec2:ExportTransitGatewayRoutes",
              "ec2:GetTransitGatewayAttachmentPropagations",
              "ec2:GetTransitGatewayRouteTableAssociations",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:ModifyTransitGatewayVpcAttachment",
              "ec2:RejectTransitGatewayVpcAttachment",
              "ec2:ReplaceTransitGatewayRoute",
              "ec2:SearchTransitGatewayRoutes"
            ],
            Resource: "*"
          },
        ]

  DeveloperGroup:
    Type: "AWS::IAM::Group"
    DependsOn:
      - IpRestrictionAndMFAForcePolicy
      - ChangeOwnPasswordPolicy
      - DenyNetworkAccessPolicy
    Properties:
      GroupName: "DevelopersGroup"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/PowerUserAccess"
        - Fn::Join: [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":policy/IpRestrictionAndMFAForcePolicy" ] ]
        - Fn::Join: [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":policy/ChangeOwnPasswordPolicy" ] ]
        - Fn::Join: [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":policy/DenyNetworkAccessPolicy" ] ]

  AdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "AdminRole"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                - Fn::Join: [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":user/", !Ref "DevIAMUser" ] ]
            Action: "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: "true"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
